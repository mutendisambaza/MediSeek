/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mediseek.pat.Receptionist;
import java.text.SimpleDateFormat;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import mediseek.pat.CriticalClasses.DataValidation;
import mediseek.pat.Tables.Appointments;
import mediseek.pat.Tables.Patients;
import mediseek.pat.Tables.Staff;
import mediseek.pat.Tables.useAppointments;
import mediseek.pat.Tables.usePatients;
import mediseek.pat.Tables.useStaff;
/**
 *
 * @author tendi
 */
public class addAppointmentGUI extends javax.swing.JFrame {
DefaultListModel dlstAppoint = new DefaultListModel();
DefaultListModel dlstPHistory = new DefaultListModel();
Appointments[] appDirectory = new Appointments[100]; 
useAppointments objApp = new useAppointments();
Appointments[] appDirectoryHistory = new Appointments[100]; 

useStaff objStaff = new useStaff();
Staff[] staffDirectory = new Staff[500];
Patients[] patientDirectory = new Patients[100]; 
usePatients objPatients = new usePatients();

//OTHER OBJECTS
DataValidation objValidation = new DataValidation();
    /**
     * Creates new form addAppointmentGUI
     */
    public addAppointmentGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dateAppoint = new com.toedter.calendar.JDateChooser();
        lblTitle = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tf_Symptoms = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cbAdmit = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        cbTAppointTme = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        tf_PatientID = new javax.swing.JTextField();
        tf_StaffID = new javax.swing.JTextField();
        BTNSchedule = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dateAppoint.setBackground(new java.awt.Color(9, 39, 39));
        jPanel1.add(dateAppoint, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 380, -1));

        lblTitle.setFont(new java.awt.Font("Bookman Old Style", 1, 36)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(102, 255, 204));
        lblTitle.setText("New Appointment:");
        jPanel1.add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, 370, 80));

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel7.setText("Staff ID of Specialist:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 210, 150, 30));

        tf_Symptoms.setBackground(new java.awt.Color(6, 23, 37));
        tf_Symptoms.setForeground(new java.awt.Color(255, 255, 255));
        tf_Symptoms.setToolTipText("Enter the ID of the patient you wish to schedule an appointment for. NOTE: They have to be added as a patient in the hospital database or you may not progress!!");
        jPanel1.add(tf_Symptoms, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 480, 340, 50));

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel8.setText("Symptoms Experienced:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 450, 180, 30));

        jLabel9.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel9.setText("Patient ID:");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 90, 30));

        cbAdmit.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        cbAdmit.setText("Will they be admitted to the hospital?");
        jPanel1.add(cbAdmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 530, 280, 30));

        jLabel10.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel10.setText("Date of Appointment:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, 160, 30));

        cbTAppointTme.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECT", "08:00", "08:30", "09:00", "09:30", "10:00", "10:30", "11:00", "11:30", "12:00", "12:30", "13:00", "13:30", "14:00", "14:30", "15:00", "15:30", "16:00", "16:30", "17:00", "17:30", "18:00" }));
        cbTAppointTme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbTAppointTmeActionPerformed(evt);
            }
        });
        jPanel1.add(cbTAppointTme, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 400, 80, -1));

        jLabel11.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel11.setText("Time of Appointment:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 360, 160, 30));

        tf_PatientID.setBackground(new java.awt.Color(6, 23, 37));
        tf_PatientID.setForeground(new java.awt.Color(255, 255, 255));
        tf_PatientID.setToolTipText("Enter the ID of the patient you wish to schedule an appointment for. NOTE: They have to be added as a patient in the hospital database or you may not progress!!");
        jPanel1.add(tf_PatientID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 150, 180, 40));

        tf_StaffID.setBackground(new java.awt.Color(6, 23, 37));
        tf_StaffID.setForeground(new java.awt.Color(255, 255, 255));
        tf_StaffID.setToolTipText("Enter the ID of the patient you wish to schedule an appointment for. NOTE: They have to be added as a patient in the hospital database or you may not progress!!");
        jPanel1.add(tf_StaffID, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 210, 180, 40));

        BTNSchedule.setBackground(new java.awt.Color(0, 204, 51));
        BTNSchedule.setForeground(new java.awt.Color(0, 0, 0));
        BTNSchedule.setText("SCHEDULE");
        BTNSchedule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BTNScheduleActionPerformed(evt);
            }
        });
        jPanel1.add(BTNSchedule, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 570, -1, -1));

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setText("CLOSE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 570, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 420, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BTNScheduleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BTNScheduleActionPerformed
 /**
     * Method that allows for the collection of data and input of that data into the updateTable for appointments
     * only after the data validation has been surpassed then it will continue
     */ 
//Assigns the DOB Variable with a value         
                            String DOB = "";
                            if (dateAppoint.getDate() != null) {
                                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                DOB = sdf.format(dateAppoint.getDate());
                            } else {
                                DOB = null;
                            }
//Checks if every field is full
//Fills the Admissions and Time variables
        if (objValidation.isNotEmpty(tf_PatientID.getText()) == true && objValidation.isNotEmpty(tf_StaffID.getText()) == true
            && objValidation.isNotEmpty(tf_Symptoms.getText()) == true && cbTAppointTme.getSelectedIndex() != 0 && DOB != null) {
                 
                                                    String Admission = "";
                                                    if (cbAdmit.isSelected() == true) {
                                                        Admission = "yes";
                                                    } else {
                                                        Admission = "no";
                                                                    }
                                        String time = "";
                                        switch (cbTAppointTme.getSelectedIndex()) {
                                            case 0:
                                                break;
                                            case 1:
                                                time = "08:00";
                                                break;
                                            case 2:
                                                time = "08:30";
                                                break;
                                            case 3:
                                                time = "09:00";
                                                break;
                                            case 4:
                                                time = "09:30";
                                                break;
                                            case 5:
                                                time = "10:00";
                                                break;
                                            case 6:
                                                time = "10:30";
                                                break;
                                            case 7:
                                                time = "11:00";
                                                break;
                                            case 8:
                                                time = "11:30";
                                                break;
                                            case 9:
                                                time = "12:00";
                                                break;
                                            case 10:
                                                time = "12:30";
                                                break;
                                            case 11:
                                                time = "13:00";
                                                break;
                                            case 12:
                                                time = "13:30";
                                                break;
                                            case 13:
                                                time = "14:00";
                                                break;
                                            case 14:
                                                time = "14:30";
                                                break;
                                            case 15:
                                                time = "15:00";
                                                break;
                                            case 16:
                                                time = "15:30";
                                                break;
                                            case 17:
                                                time = "16:00";
                                                break;
                                            case 18:
                                                time = "16:30";
                                                break;
                                            case 19:
                                                time = "17:00";
                                                break;
                                            case 20:
                                                time = "17:30";
                                                break;
                                            case 21:
                                                time = "18:00";
                                                break;
                                            default:
                                                System.out.println("INVALID SELECTION");
                                                break;
                                        }
                             //addes a new record to the table and refreshes the display of the list

                                        System.out.println("insert into tblAppointments (PatientNo, Staff_ID, appDate, appTime, Admission, Symptoms) values('" + tf_PatientID.getText() + "','" + tf_StaffID.getText() + "',#" + DOB
                                                + "#,'" + time + "'," + Admission + ",'" + tf_Symptoms.getText() + "') ;");

                                        objApp.updateTable("insert into tblAppointments (PatientNo, Staff_ID, appDate, appTime, Admission, Symptoms) values('" + tf_PatientID.getText() + "','" + tf_StaffID.getText() + "',#" + DOB
                                                + "#,'" + time + "'," + Admission + ",'" + tf_Symptoms.getText() + "') ;");


                                     this.dispose();JOptionPane.showMessageDialog(null, "Appointment has been Successfully Scheduled");
                          
        } else {
            JOptionPane.showMessageDialog(null, "UNABLE TO ADD PATIENT \nPlease ensure that every field has been filled in then retry your entry.");
        }

       
        
    }//GEN-LAST:event_BTNScheduleActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cbTAppointTmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbTAppointTmeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbTAppointTmeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(addAppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(addAppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(addAppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(addAppointmentGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new addAppointmentGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BTNSchedule;
    private javax.swing.JCheckBox cbAdmit;
    private javax.swing.JComboBox<String> cbTAppointTme;
    private com.toedter.calendar.JDateChooser dateAppoint;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextField tf_PatientID;
    private javax.swing.JTextField tf_StaffID;
    private javax.swing.JTextField tf_Symptoms;
    // End of variables declaration//GEN-END:variables
}
